[{"/Users/geospark-device-5/Documents/appiness-task-login/src/index.js":"1","/Users/geospark-device-5/Documents/appiness-task-login/src/store/configureStore.js":"2","/Users/geospark-device-5/Documents/appiness-task-login/src/reportWebVitals.js":"3","/Users/geospark-device-5/Documents/appiness-task-login/src/reducers/index.js":"4","/Users/geospark-device-5/Documents/appiness-task-login/src/routes.js":"5","/Users/geospark-device-5/Documents/appiness-task-login/src/containers/authentication/privateRoute.js":"6","/Users/geospark-device-5/Documents/appiness-task-login/src/reducers/loginReducer.js":"7","/Users/geospark-device-5/Documents/appiness-task-login/src/components/login.js":"8","/Users/geospark-device-5/Documents/appiness-task-login/src/services/userServices.js":"9","/Users/geospark-device-5/Documents/appiness-task-login/src/helpers/authHeader.js":"10","/Users/geospark-device-5/Documents/appiness-task-login/src/constants/userConstants.js":"11","/Users/geospark-device-5/Documents/appiness-task-login/src/helpers/fakeBackend.js":"12","/Users/geospark-device-5/Documents/appiness-task-login/src/actions/history.js":"13","/Users/geospark-device-5/Documents/appiness-task-login/src/components/employeeList.js":"14"},{"size":553,"mtime":1606213116633,"results":"15","hashOfConfig":"16"},{"size":232,"mtime":1606204635408,"results":"17","hashOfConfig":"16"},{"size":364,"mtime":1606205128460,"results":"18","hashOfConfig":"16"},{"size":168,"mtime":1606205430713,"results":"19","hashOfConfig":"16"},{"size":516,"mtime":1606273195938,"results":"20","hashOfConfig":"16"},{"size":424,"mtime":1606206204087,"results":"21","hashOfConfig":"16"},{"size":662,"mtime":1606239305985,"results":"22","hashOfConfig":"16"},{"size":3809,"mtime":1606273739858,"results":"23","hashOfConfig":"16"},{"size":527,"mtime":1606239386078,"results":"24","hashOfConfig":"16"},{"size":226,"mtime":1606238981957,"results":"25","hashOfConfig":"16"},{"size":176,"mtime":1606239298769,"results":"26","hashOfConfig":"16"},{"size":1764,"mtime":1606240782327,"results":"27","hashOfConfig":"16"},{"size":88,"mtime":1606204669194,"results":"28","hashOfConfig":"16"},{"size":1997,"mtime":1606274223227,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"bxn4f5",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},"/Users/geospark-device-5/Documents/appiness-task-login/src/index.js",[],["65","66"],"/Users/geospark-device-5/Documents/appiness-task-login/src/store/configureStore.js",[],["67","68"],"/Users/geospark-device-5/Documents/appiness-task-login/src/reportWebVitals.js",[],"/Users/geospark-device-5/Documents/appiness-task-login/src/reducers/index.js",[],["69","70"],"/Users/geospark-device-5/Documents/appiness-task-login/src/routes.js",[],["71","72"],"/Users/geospark-device-5/Documents/appiness-task-login/src/containers/authentication/privateRoute.js",[],["73","74"],"/Users/geospark-device-5/Documents/appiness-task-login/src/reducers/loginReducer.js",[],"/Users/geospark-device-5/Documents/appiness-task-login/src/components/login.js",["75","76","77"],"/Users/geospark-device-5/Documents/appiness-task-login/src/services/userServices.js",["78"],"import authHeader from \"../helpers/authHeader\";\n\nconst userServices = {\n  login\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password })\n  };\n\n  return fetch(`/`, requestOptions).then((user) => {\n    if (user) {\n      user.authdata = window.btoa(username + \":\" + password);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nexport default userServices;\n","/Users/geospark-device-5/Documents/appiness-task-login/src/helpers/authHeader.js",[],"/Users/geospark-device-5/Documents/appiness-task-login/src/constants/userConstants.js",[],"/Users/geospark-device-5/Documents/appiness-task-login/src/helpers/fakeBackend.js",[],"/Users/geospark-device-5/Documents/appiness-task-login/src/actions/history.js",[],"/Users/geospark-device-5/Documents/appiness-task-login/src/components/employeeList.js",["79"],"import React, { Component } from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nclass EmployeeList extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const user = [\n      {\n        id: 1,\n        name: \"test1\",\n        age: \"11\",\n        gender: \"male\",\n        email: \"test1@gmail.com\",\n        phoneNo: \"9415346313\"\n      },\n      {\n        id: 2,\n        name: \"test2\",\n        age: \"12\",\n        gender: \"male\",\n        email: \"test2@gmail.com\",\n        phoneNo: \"9415346314\"\n      },\n      {\n        id: 3,\n        name: \"test3\",\n        age: \"13\",\n        gender: \"male\",\n        email: \"test3@gmail.com\",\n        phoneNo: \"9415346315\"\n      },\n      {\n        id: 4,\n        name: \"test4\",\n        age: \"14\",\n        gender: \"male\",\n        email: \"test4@gmail.com\",\n        phoneNo: \"9415346316\"\n      },\n      {\n        id: 5,\n        name: \"test5\",\n        age: \"15\",\n        gender: \"male\",\n        email: \"test5@gmail.com\",\n        phoneNo: \"9415346317\"\n      },\n      {\n        id: 6,\n        name: \"test6\",\n        age: \"16\",\n        gender: \"male\",\n        email: \"test6@gmail.com\",\n        phoneNo: \"9415346318\"\n      }\n    ];\n\n    return (\n      <div>\n        <h1>Employee List:</h1>\n        <Table className=\"employee-table\">\n          <thead>\n            <tr>\n              <th>id</th>\n              <th>Name</th>\n              <th>Age</th>\n              <th>Gender</th>\n              <th>Gmail</th>\n              <th>Phone No.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {user &&\n              user.map((user, index) => (\n                <tr>\n                  <td>{user.id}</td>\n                  <td>{user.name}</td>\n                  <td>{user.age}</td>\n                  <td>{user.gender}</td>\n                  <td>{user.email}</td>\n                  <td>{user.phoneNo}</td>\n                </tr>\n              ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default EmployeeList;\n",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"80","replacedBy":"84"},{"ruleId":"82","replacedBy":"85"},{"ruleId":"80","replacedBy":"86"},{"ruleId":"82","replacedBy":"87"},{"ruleId":"80","replacedBy":"88"},{"ruleId":"82","replacedBy":"89"},{"ruleId":"80","replacedBy":"90"},{"ruleId":"82","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":30,"column":33,"nodeType":"94","messageId":"95","endLine":30,"endColumn":42},{"ruleId":"96","severity":1,"message":"97","line":39,"column":9,"nodeType":"98","messageId":"99","endLine":41,"endColumn":10},{"ruleId":"100","severity":1,"message":"101","line":101,"column":15,"nodeType":"102","endLine":101,"endColumn":951},{"ruleId":"92","severity":1,"message":"103","line":1,"column":8,"nodeType":"94","messageId":"95","endLine":1,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":5,"column":3,"nodeType":"106","messageId":"107","endLine":7,"endColumn":4},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],["108"],["109"],["108"],["109"],["108"],["109"],["108"],["109"],"no-unused-vars","'returnUrl' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'authHeader' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]